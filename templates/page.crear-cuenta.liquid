<!-- Hojas de estilos css -->
{{ 'estilos-generales.css' | asset_url | stylesheet_tag }}
{{ 'estilos-auxliares.css' | asset_url | stylesheet_tag }}
{{ 'page-crear-cuenta.css' | asset_url | stylesheet_tag }}
{{ 'page-checkout.css' | asset_url | stylesheet_tag }}

<crear-cuenta>
  <div class="container-main-smecph container-base">
    <small>CREAR CUENTA</small>
    <section class="container-sub-smecph" id="pccph-frm-datos-contacto">
      <div class="ph-mcci-header-simplec">
        <h4>Datos de contacto</h4>
        <p>Ingrese tus datos para disfrutar tu pizza favorita.</p>
      </div>
      <div class="ph-mcci-frm">
        <div class="ph-mcci-input">
          <p>Nombres</p>
          <div class="ph-container-input">
            <input
              pattern="[A-Za-zÀ-ÖØ-öø-ÿ\s]+"
              required
              type="text"
              placeholder="Nombres"
            >
          </div>
        </div>
        <div class="ph-mcci-input">
          <p>Apellidos</p>
          <div class="ph-container-input">
            <input
              required
              pattern="[A-Za-zÀ-ÖØ-öø-ÿ\s]+"
              type="text"
              placeholder="Apellidos"
            >
          </div>
        </div>
        <div class="ph-mcci-input">
          <p>Correo Electrónico</p>
          <div class="ph-container-input">
            <input
              required
              type="email"
              placeholder="Correo Electrónico"
            >
          </div>
        </div>
        <div class="ph-mcci-input">
          <p>Celular</p>
          <div class="ph-container-input">
            <input
              type="tel"
              placeholder="Numero de celular"
              maxlength="8"
              oninput="
                this.value = this.value.replace(/[^0-9]/g, '');
                if (this.value.length > 0 && this.value[0] !== '6' && this.value[0] !== '7') {
                  this.value = '7' + this.value.substring(1);
                }
              "
              pattern="[67][0-9]{7}"
            >
          </div>
          <div class="ph-mcci-mensaje-input">
            {% render 'icon-info' %}
            <p>Nos contactaremos a este número para entregar tu pedido.</p>
          </div>
        </div>
        <div class="ph-mcci-input error">
          <p>Número de Carnet de identidad (C.I.)</p>
          <div class="ph-container-input">
            <input
              type="tel"
              placeholder="Carnet de identidadr"
              maxlength="15"
              oninput="this.value=this.value.replace(/[^0-9]/g,'')"
              pattern="[0-9]{1,8}"
            >
          </div>
          <div class="ph-mcci-mensaje-input">
            {% render 'icon-info' %}
            <p>Este campo es obligatorio.</p>
          </div>
        </div>
      </div>
    </section>
    <section class="container-sub-smecph" id="pccph-frm-direccion">
      <div class="ph-mcci-header-simplec">
        <h4>Dirección</h4>
        <p>Ingresa una dirección o usa tu ubicación actual.</p>
      </div>
      <button
        id="phpcc-btn-mi-ubicacion-actual"
        class="ph-btn-secundario"
      >
        {% render 'icon-gps-rojo' %}
        <p>USAR MI UBICACIÓN ACTUAL</p>
      </button>
      <div class="pccph-modal-separador">
        <div class="pccph-modal-separador-linea"></div>
        <p>O</p>
        <div class="pccph-modal-separador-linea"></div>
      </div>
      <div class="ph-container-input icon-color-tertiary">
        <div id="phpcc-sugerencias-direccion" class="psme-sugerencias-container"></div>
        {% render 'icon-location-on' %}
        <input id="phpcc-input-direccion" type="text" placeholder="Ingresar dirección o punto de referencia">
      </div>
    </section>
    <section class="container-sub-smecph" id="pccph-hutcoins">
      <div class="smecph-pc-hutcoins-banner">
        <img src="{{ 'banner-hutcoints-carrito.png' | asset_url }}" alt="Hutcoins Banner" width="100%" height="100%">
      </div>
      <div class="smecph-pc-hutcoins-mensaje">
        <button
          id="phpcc-btn-hutcoins"
          class="ph-container-icono"
        >
          {% render 'icon-checkbox-off' %}
        </button>
        <p>Usar mi información para registrarme a Hut Coins y ganar puntos por esta compra.</p>
      </div>
      <div class="ph-mcci-input">
        <p>Fecha de nacimiento</p>
        <div class="ph-container-input">
          <input type="date" placeholder="Fecha de nacimiento">
        </div>
      </div>
    </section>
    <section class="container-sub-smecph pccph-extra-ultimo" id="pccph-termino-condiciones">
      <div class="smecph-pc-hutcoins-mensaje ">
        <button
          id="phpcc-btn-info-hutcoins"
          class="ph-container-icono"
        >
          {% render 'icon-checkbox-off' %}
        </button>
        <p>Usar mi información para registrarme a Hut Coins y ganar puntos en las futuras compras.</p>
      </div>
    </section>
    <section class="ph-opciones-mobile-footer">
      <button
        id="phpcc-btn-continuar"
        class="ph-btn-general desactivado"
      >
        <p>CONTINUAR</p>
      </button>
      <a
        href="/"
        class="ph-btn-primario"
      >
        <p>CANCELAR</p>
      </a>
    </section>

    <!-- 1re MODAL : SNIPPER DE CARGANDO -->
    <section
      id="phpcc-modal-background"
      class="ph-background-container-modal"
    >
      <div
        id="phpcc-modal-snipper"
        class="ph-modal-main-snipper"
      >
        <div class="ph-modal-body-snipper">
          <div class="snipper-container">
            <div class="snipper-background">
              <img
                src="{{ 'fondoSnipper.png' | asset_url }}"
                alt="Fondo de Snipper"
                width="100%"
                height="100%"
              >
            </div>
            <div class="snipper-logo">
              <img
                src="{{ 'logoSnipper.png' | asset_url }}"
                alt="Logo de Snipper"
                width="100%"
                height="100%"
              >
            </div>
          </div>
        </div>
        <p>Procesando informacion ...</p>
      </div>
    </section>

    <!-- MODAL DE DAR MI DIRECCION -->
    <section
      id="phpcc-modal-dar-direccion"
      class="psme-modal-mapa-envio-domicilio"
    >
      <div
        id="phpcc-contenido-modal-body"
        class="psme-modal-contenedor-base"
      >
        <div class="psme-modal-header">
          <div class="psme-modal-mensaje">
            {% render 'icon-info' %}
            <p>Si es necesario, cambia la ubicación del pin en el mapa.</p>
          </div>
          <button class="psme-modal-boton-cerrar icon-color-tertiary" id="phpcc-boton-cerrar-modal">
            {% render 'icon-close-rojo' %}
          </button>
        </div>
        <div
          id="phpcc-modal-mapa"
          class="psme-modal-body"
        ></div>
        <div class="psme-modal-footer">
          <button class="psme-modal-boton-confirmar" id="phpcc-btn-confirmar-modal">
            <p>Confirmar</p>
          </button>
          <button class="psme-modal-boton-cancelar" id="phpcc-btn-cancelar-modal">
            <p>Cerrar</p>
          </button>
        </div>
      </div>
    </section>
  </div>
</crear-cuenta>

<script>
  class CrearCuenta extends HTMLElement {
    constructor() {
      super();
      this.iconos = {
        iconCheckBoxOff: `{% render 'icon-checkbox-off' %}`,
        iconCheckBoxOn: `{% render 'icon-checkbox-on' %}`,
      };
      this.coordenadas = { lat: -17.783315017953004, lng: -63.18214577296119 };
      this.direccionSeleccionada = false;
    }

    connectedCallback() {
      // CAPTURAR ELEMENTOS
      this.modalBackground = this.querySelector('#phpcc-modal-background');
      this.modalSnipper = this.querySelector('#phpcc-modal-snipper');
      this.contenedorGeneralMiUbicacion = this.querySelector('#phpcc-modal-dar-direccion');
      this.contenedorModalBody = this.querySelector('#phpcc-contenido-modal-body');
      this.btnMiUbicacionActual = this.querySelector('#phpcc-btn-mi-ubicacion-actual');
      this.btnCerrarModalMiUbicacion = this.querySelector('#phpcc-boton-cerrar-modal');
      this.contenedorMapaMiUbicacion = this.querySelector('#phpcc-modal-mapa');
      this.btnHutCoins = this.querySelector('#phpcc-btn-hutcoins');
      this.btnInfoHutCoins = this.querySelector('#phpcc-btn-info-hutcoins');
      this.btnContinuar = this.querySelector('#phpcc-btn-continuar');
      this.btnConfirmarModal = this.querySelector('#phpcc-btn-confirmar-modal');
      this.btnCancelarModal = this.querySelector('#phpcc-btn-cancelar-modal');
      this.inputDireccion = this.querySelector('#phpcc-input-direccion');
      this.contenedorSugerencias = this.querySelector('#phpcc-sugerencias-direccion');

      // INICIARLZAR EVENTOS
      this.btnMiUbicacionActual.addEventListener('click', this.accesoUbicacionActualModal.bind(this));
      this.btnCerrarModalMiUbicacion.addEventListener('click', this.cerrarModalMiUbicacion.bind(this));
      this.btnHutCoins.addEventListener('click', this.cambiarEstadoHutCoins.bind(this));
      this.btnInfoHutCoins.addEventListener('click', this.cambiarEstadoInfoHutCoins.bind(this));
      this.btnContinuar.addEventListener('click', this.procesoFormulario.bind(this));
      this.btnConfirmarModal.addEventListener('click', this.procesoConfirmacionModal.bind(this));
      this.btnCancelarModal.addEventListener('click', this.cerrarModalMiUbicacion.bind(this));
      document.addEventListener('click', this.detectarClickFueraDeElementosEspeciales.bind(this));

      // INICIALIZAR ELEMENTOS
      this.modalBackground.style.display = 'none';
      this.contenedorGeneralMiUbicacion.style.display = 'none';
      this.modalSnipper.style.display = 'none';
      this.inicializarPaginaLocalStorage(0);
    }

    inicializarPaginaLocalStorage(intentos = 0) {
      // Verificar si Google Maps esta cargado
      if (typeof google == 'undefined') {
        {% comment %} this.containerModalCarga.style.display = 'flex'; {% endcomment %}
        // Limitar a 10 intentos para evitar bucles infinitos
        if (intentos < 10) {
          console.log('Google Maps no está cargado, esperando... Intento ' + (intentos + 1));
          setTimeout(() => {
            this.inicializarPaginaLocalStorage(intentos + 1);
          }, 500); // Esperar 0.5 segundos antes de volver a intentar
        } else {
          console.error('Google Maps no se cargó después de varios intentos');
        }
        return;
      }

      console.log('Google Maps cargado correctamente');
      this.configurarAutocompletadoDirecciones();
    }

    accesoUbicacionActualModal() {
      this.contenedorGeneralMiUbicacion.style.display = 'flex';
      // Activar el mapa dentro del modall

      // 1. Crear el mapa
      if (!this.contenedorMapaMiUbicacion) {
        alert('Error: No se pudo cargar el mapa. Por favor recarga la página');
        return;
      }

      console.log('Entra a inicializarMapaEnvioDomicilio : ', this.coordenadas);

      const configuracionMapa = {
        center: this.coordenadas,
        zoom: 16,
        mapTypeControl: false,
        streetViewControl: false,
        fullscreenControl: false,
        zoomControl: true,
        scaleControl: false,
        rotateControl: false,
        panControl: false,
        disableDefaultUI: false,
      };

      const mapa = new google.maps.Map(this.contenedorMapaMiUbicacion, configuracionMapa);

      // 2. Crear el marcador movible
      const marcadorMovible = new google.maps.Marker({
        position: this.coordenadas,
        map: mapa,
        draggable: true,
        animation: google.maps.Animation.DROP,
      });

      // 3. Configurar el evento del marcador
      if(this.direccionSeleccionada == true) return;
      marcadorMovible.addListener('dragend', (evento) => {
        try {
          const posicion = marcadorMovible.getPosition();
          this.coordenadas = { lat: posicion.lat(), lng: posicion.lng() };

          console.log('Coordenadas: ', this.coordenadas);
          mapa.panTo(posicion);
        } catch {
          alert('Error al actualizar la posición');
          console.error(error);
        }
      });

      // 4. Pedir la ubicacion del usuario y actualizar el marcador a esa posicion
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            try {
              const miUbicacion = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
              };

              marcadorMovible.setPosition(miUbicacion);
              mapa.panTo(miUbicacion);
              this.coordenadas = miUbicacion;
            } catch (error) {
              alert('Error al obtener la ubicación: Por favor, verifique la ubicación de su dispositivo');
              console.log('Error al obtener la ubicación 1: ', error);
            }
          },
          (error) => {
            alert('Error al obtener la ubicación: Por favor, verifique la ubicación de su dispositivo');
            console.log('Error al obtener la ubicación 2: ', error);
          }
        );
      }
    }

    detectarClickFueraDeElementosEspeciales(event) {
      // Verificar si el modal general está visible
      if (this.contenedorGeneralMiUbicacion.style.display === 'flex') {
        // Si el clic fue dentro del modal body, no hacer nada
        if (this.contenedorModalBody.contains(event.target)) {
          return; // El clic fue dentro del contenido del modal, no cerramos
        }

        // Si el clic fue en el contenedor general pero fuera del modal body, cerrar todo
        if (this.contenedorGeneralMiUbicacion.contains(event.target)) {
          this.contenedorGeneralMiUbicacion.style.display = 'none';
          this.modalBackground.style.display = 'none';
        }
      }
    }

    cerrarModalMiUbicacion() {
      this.contenedorGeneralMiUbicacion.style.display = 'none';
    }

    cambiarEstadoHutCoins() {
      const estaActivado = this.btnHutCoins.classList.contains('activado');
      if (estaActivado) {
        this.btnHutCoins.classList.remove('activado');
        this.btnHutCoins.innerHTML = this.iconos.iconCheckBoxOff;
      } else {
        this.btnHutCoins.classList.add('activado');
        this.btnHutCoins.innerHTML = this.iconos.iconCheckBoxOn;
      }
    }

    cambiarEstadoInfoHutCoins() {
      const estaActivado = this.btnInfoHutCoins.classList.contains('activado');
      if (estaActivado) {
        this.btnInfoHutCoins.classList.remove('activado');
        this.btnInfoHutCoins.innerHTML = this.iconos.iconCheckBoxOff;
      } else {
        this.btnInfoHutCoins.classList.add('activado');
        this.btnInfoHutCoins.innerHTML = this.iconos.iconCheckBoxOn;
      }
    }

    procesoFormulario() {}

    procesoConfirmacionModal() {}

    configurarAutocompletadoDirecciones() {
      // Verificar que el input existe
      if (!this.inputDireccion) return;

      // Variable para almacenar el timer del debounce
      let timeoutId = null;

      // Variable para el servicio de Places
      this.placesService = new google.maps.places.AutocompleteService();

      // Escuchar el evento input
      this.inputDireccion.addEventListener('input', (e) => {
        // Limpiar el timer anterior si existe
        if (timeoutId) {
          clearTimeout(timeoutId);
        }

        const query = e.target.value.trim();

        // Si el input está vacío, ocultar sugerencias
        if (!query) {
          this.contenedorSugerencias.style.display = 'none';
          return;
        }

        // Configurar debounce (500ms)
        timeoutId = setTimeout(() => {
          this.buscarSugerenciasDirecciones(query);
        }, 500);
      });

      // Cerrar sugerencias al hacer clic fuera
      document.addEventListener('click', (e) => {
        if (!this.inputDireccion.contains(e.target) && !this.contenedorSugerencias.contains(e.target)) {
          this.contenedorSugerencias.style.display = 'none';
        }
      });
    }

    buscarSugerenciasDirecciones(query) {
      // Opciones para la búsqueda
      const opcionesBusqueda = {
        input: query,
        componentRestrictions: { country: 'bo' }, // Ajusta al país (Bolivia)
      };

      // Realizar la búsqueda
      this.placesService.getPlacePredictions(opcionesBusqueda, (predictions, status) => {
        // Limpiar contenedor de sugerencias
        this.contenedorSugerencias.innerHTML = '';

        if (status !== google.maps.places.PlacesServiceStatus.OK || !predictions) {
          this.contenedorSugerencias.style.display = 'none';
          return;
        }

        // Limitar a 3 sugerencias
        const sugerencias = predictions.slice(0, 3);

        // Mostrar sugerencias
        sugerencias.forEach((sugerencia) => {
          const elemento = document.createElement('div');
          elemento.classList.add('psme-sugerencia-item');

          // Crear elemento p para el texto
          const textoElemento = document.createElement('p');
          textoElemento.textContent = sugerencia.description;
          elemento.appendChild(textoElemento);

          // Agregar evento de clic
          elemento.addEventListener('click', () => {
            this.seleccionarDireccion(sugerencia);
          });

          this.contenedorSugerencias.appendChild(elemento);
        });

        // Mostrar el contenedor
        if (sugerencias.length > 0) {
          this.contenedorSugerencias.style.display = 'block';
        } else {
          this.contenedorSugerencias.style.display = 'none';
        }
      });
    }

    seleccionarDireccion(sugerencia) {
      this.controlSeleccionInput = true;

      // Actualizar el valor del input
      this.inputDireccion.value = sugerencia.description;

      // Marcar que se ha seleccionado una dirección
      this.direccionSeleccionada = true;

      // Ocultar sugerencias
      this.contenedorSugerencias.style.display = 'none';

      // Obtener las coordenadas del lugar seleccionado
      const geocoder = new google.maps.Geocoder();
      geocoder.geocode({ placeId: sugerencia.place_id }, (results, status) => {
        if (status === google.maps.GeocoderStatus.OK && results[0]) {
          const ubicacion = results[0].geometry.location;

          // Actualizar la variable de coordenadas usada de forma general
          this.coordenadas = {
            lat: ubicacion.lat(),
            lng: ubicacion.lng(),
          };

          console.log('Coordenadas de direcciónn seleccionada:', this.coordenadas);
        }
      });
    }
  }

  customElements.define('crear-cuenta', CrearCuenta);
</script>
