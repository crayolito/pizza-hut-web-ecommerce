d{% layout 'none' %}

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solicitud de Método de Entrega</title>

    <script
      defer
      src="https://maps.googleapis.com/maps/api/js?key={{settings.keyGoogleMap}}&libraries=places"
    ></script>
    {{ 'estilos-auxliares.css' | asset_url | stylesheet_tag }}
  </head>
  <body>
    <cliente-localizacion>
      <div class="psme-base-container">
        <!-- IMAGEN BACKGROUND CONTENEDOR BASE -->
        <div class="psme-pizza-logo-background">
          <img
            src="{{ 'img-aux-background-solicitud-entrega.png' | asset_url }}"
            alt="Pizza Background"
          >
        </div>
        <!-- CONTENIDO PRINCIPAL -->
        <section class="psme-contenido-principal">
          <div class="psme-pizza-logo">
            <img
              src="{{ 'logo-secondary-2.png' | asset_url }}"
              alt="Pizza Background"
            >
          </div>
          <div class="psme-mensaje">
            <h1 class="psme-title-primario">¿Cómo quieres recibir tu pizza?</h1>
            <p class="psme-title-secundario">
              Elige si la llevamos hasta la puerta de tu casa o si prefieres recogerla tú mismo desde nuestro local más
              cercano.
            </p>
          </div>
          <section class="psme-opciones-entrega">
            <button class="psme-opcion" id="psme-boton-recoger-local">
              <div class="psme-icono-select">
                {% render 'icon-estado-off' %}
              </div>
              <div class="psme-info-select">
                {% render 'icon-recogo-local' %}
                <div class="psme-info-select-text">
                  <p style="font-weight: 600;">Recoger en local</p>
                  <p>Sin costo alguno</p>
                </div>
              </div>
            </button>
            <button class="psme-opcion" id="psme-boton-envio-domicilio">
              <div class="psme-icono-select">
                {% render 'icon-estado-off' %}
              </div>
              <div class="psme-info-select">
                {% render 'icon-domicilio' %}
                <div class="psme-info-select-text">
                  <p style="font-weight: 600;">Envío a domicilio</p>
                  <p>Envío a solo Bs 2</p>
                </div>
              </div>
            </button>
          </section>

          <!-- SECTOR DE OPCIONES ENVIO A DOMICILIO -->
          <section class="psme-opciones-envio-domicilio">
            <p>Ingresar dirección o usar mi ubicación actual</p>
            <button id="psme-boton-ubicacion-actual" class="psme-boton-ubicacion-actual">
              {% render 'icon-location-on' %}
              <p>Usar mi ubicación actual</p>
            </button>
            <div class="psme-linea-separadora">
              <hr>
              <p>o</p>
              <hr>
            </div>
            <div class="psme-input-direccion">
              <div id="psme-sugerencias-direccion" class="psme-sugerencias-container"></div>
              {% render 'icon-location-on-negro' %}
              <input type="text" id="psme-input-direccion" placeholder="Ingresar dirección o punto de referencia">
            </div>
          </section>
        </section>

        <!-- SECTOR PARA ELECCION DE RECOGER EN LOCAL -->
        <section class="psme-opciones-recoger-local">
          <div class="psme-opciones-recoger-local-mensaje">
            {% render 'icon-info' %}
            <p>Selecciona en el mapa o en la lista la dirección del local de donde quieres recoger tu pedido.</p>
          </div>
          <div class="psme-recoger-local-info">
            <div class="psme-recoger-local-mapa"></div>
            <div class="psme-rl-locales">
              {% comment %}
                <div class="psme-rl-local psme-rl-local-seleccionado">
                  <div class="psme-rl-titulos">
                    <h3>sANTA CRUZ</h3>
                    <h3 style="color: #C8102E;">las palmas</h3>
                  </div>
                  <div class="psme-rl-disponibilidad">
                    <div class="psme-rl-disponibilidad-info psme-rl-abierto ">
                      {% render 'icon-disponibilidad' %}
                      <p>ABIERTO</p>
                    </div>
                  </div>
                  <div class="psme-rl-info-local ">
                    <div class="psme-rl-info-local-item">
                      {% render 'icon-location-on' %}
                      <p>Doble vía a La Guardia</p>
                    </div>
                    <div class="psme-rl-info-local-item">
                      {% render 'icon-headser-mic' %}
                      <p>78452415</p>
                    </div>
                    <div class="psme-rl-info-local-item">
                      {% render 'icon-clock' %}
                      <p>Abre a las 11:00 AM</p>
                    </div>
                    <div class="psme-rl-info-servicios">
                      <div class="psme-rl-info-servicio">
                        {% render 'icon-check' %}
                        <p>Envío a domicilio</p>
                      </div>
                      <div class="psme-rl-info-servicio">
                        {% render 'icon-check' %}
                        <p>Recoger en local</p>
                      </div>
                    </div>
                  </div>
                  <button class="psme-rl-boton psme-rl-empezar">
                    <p>EMPEZAR MI PEDIDO</p>
                  </button>
                  <button class="psme-rl-boton psme-rl-ubicacion">
                    <p>Abrir ubicación en mapa</p>
                    {% render 'icon-map' %}
                  </button>
                </div>
                <div class="psme-rl-local psme-rl-local-no-seleccionado">
                  <div class="psme-rl-titulos">
                    <h3>sANTA CRUZ</h3>
                    <h3 style="color: #C8102E;">las palmas</h3>
                  </div>
                  <div class="psme-rl-disponibilidad">
                    <div class="psme-rl-disponibilidad-info psme-rl-cerrado ">
                      {% render 'icon-disponibilidad' %}
                      <p>CERRADO</p>
                    </div>
                  </div>
                  <div class="psme-rl-info-local ">
                    <div class="psme-rl-info-local-item">
                      {% render 'icon-location-on' %}
                      <p>Doble vía a La Guardia</p>
                    </div>
                    <div class="psme-rl-info-local-item">
                      {% render 'icon-headser-mic' %}
                      <p>78452415</p>
                    </div>
                    <div class="psme-rl-info-local-item">
                      {% render 'icon-clock' %}
                      <p>Abre a las 11:00 AM</p>
                    </div>
                    <div class="psme-rl-info-servicios">
                      <div class="psme-rl-info-servicio">
                        {% render 'icon-check' %}
                        <p>Envío a domicilio</p>
                      </div>
                      <div class="psme-rl-info-servicio">
                        {% render 'icon-check' %}
                        <p>Recoger en local</p>
                      </div>
                    </div>
                  </div>
                  <button class="psme-rl-boton psme-rl-empezar">
                    <p>EMPEZAR MI PEDIDO</p>
                  </button>
                  <button class="psme-rl-boton psme-rl-ubicacion">
                    <p>Abrir ubicación en mapa</p>
                    {% render 'icon-map' %}
                  </button>
                </div>
                <div class="psme-rl-local psme-rl-local-no-seleccionado">
                  <div class="psme-rl-titulos">
                    <h3>sANTA CRUZ</h3>
                    <h3 style="color: #C8102E;">las palmas</h3>
                  </div>
                  <div class="psme-rl-disponibilidad">
                    <div class="psme-rl-disponibilidad-info psme-rl-abierto ">
                      {% render 'icon-disponibilidad' %}
                      <p>ABIERTO</p>
                    </div>
                  </div>
                  <div class="psme-rl-info-local ">
                    <div class="psme-rl-info-local-item">
                      {% render 'icon-location-on' %}
                      <p>Doble vía a La Guardia</p>
                    </div>
                    <div class="psme-rl-info-local-item">
                      {% render 'icon-headser-mic' %}
                      <p>78452415</p>
                    </div>
                    <div class="psme-rl-info-local-item">
                      {% render 'icon-clock' %}
                      <p>Abre a las 11:00 AM</p>
                    </div>
                    <div class="psme-rl-info-servicios">
                      <div class="psme-rl-info-servicio">
                        {% render 'icon-check' %}
                        <p>Envío a domicilio</p>
                      </div>
                      <div class="psme-rl-info-servicio">
                        {% render 'icon-check' %}
                        <p>Recoger en local</p>
                      </div>
                    </div>
                  </div>
                  <button class="psme-rl-boton psme-rl-empezar">
                    <p>EMPEZAR MI PEDIDO</p>
                  </button>
                  <button class="psme-rl-boton psme-rl-ubicacion">
                    <p>Abrir ubicación en mapa</p>
                    {% render 'icon-map' %}
                  </button>
                </div>
              {% endcomment %}
            </div>
          </div>
        </section>

        <!-- OPCIONES DE SELECCIÓN -->
        <section class="psme-opciones">
          <button class="psme-boton-siguiente" id="psme-boton-siguiente">
            <p>Siguiente</p>
          </button>
          <button class="psme-boton-omitir" id="p-sme-boton-omitir">
            <p>Omitir</p>
            {% render 'icon-close-rojo' %}
          </button>
        </section>
      </div>

      <section class="psme-container"></section>

      <!-- MODAL DE UBICACIÓN ENVÍO A DOMICILIO -->
      <section class="psme-modal-mapa-envio-domicilio">
        <div class="psme-modal-contenedor-base">
          <div class="psme-modal-header">
            <div class="psme-modal-mensaje">
              {% render 'icon-info' %}
              <p>Si es necesario, cambia la ubicación del pin en el mapa.</p>
            </div>
            <button class="psme-modal-boton-cerrar" id="psme-boton-cerrar-modal">
              {% render 'icon-close-rojo' %}
            </button>
          </div>
          <div class="psme-modal-body"></div>
          <div class="psme-modal-footer">
            <button class="psme-modal-boton-confirmar" id="p-sme-boton-confirmar-modal">
              <p>Confirmar</p>
            </button>
            <button class="psme-modal-boton-cancelar" id="p-sme-boton-cancelar-modal">
              <p>Cerrar</p>
            </button>
          </div>
        </div>
      </section>
    </cliente-localizacion>
  </body>
</html>

<script>
  class ClienteLocalizacion extends HTMLElement {
    constructor() {
      super();
      this.mapaRecogerLocal = null;
      this.mapaModalEnvioDomicilio = null;
      this.coordenadasBase = { lat: -17.783315017953004, lng: -63.18214577296119 };
      this.pizzaLocations = [
        { 
          lat: -17.757619, 
          lng: -63.178738, 
          name: 'BANZER 3ER ANILLO', 
          localizacion: 'Tercer Anillo Externo', 
          telefono: '78452415', 
          dias : 'Lunes a Viernes', 
          horario: '8:00 a 23:00',
          servicios: ['Envío a domicilio', 'Recoger en local']
        },
        { 
          lat: -17.70001, 
          lng: -63.160219, 
          name: 'BANZER KM 8.5', 
          localizacion: '8R2Q+2XH', 
          telefono: '78452415', 
          dias : 'Lunes a Viernes', 
          horario: '8:00 a 23:00',
          servicios: ['Envío a domicilio', 'Recoger en local']
        },
        { 
          lat: -17.807739, 
          lng: -63.204363, 
          name: 'LAS PALMAS', 
          localizacion: 'Doble vía La Guardia', 
          telefono: '78452415', 
          dias : 'Lunes a Viernes', 
          horario: '8:00 a 23:00',
          servicios: ['Envío a domicilio', 'Recoger en local']
        },
        { 
          lat: -17.758879, 
          lng: -63.19948, 
          name: 'SAN MARTIN', 
          localizacion: 'Av. San Martin 2200', 
          telefono: '78452415', 
          dias : 'Lunes a Viernes', 
          horario: '8:00 a 23:00',
          servicios: ['Envío a domicilio', 'Recoger en local']
        },
        { 
          lat: -17.820341, 
          lng: -63.184337, 
          name: 'SANTOS DUMONT', 
          localizacion: 'Av Santos Dumont 3228', 
          telefono: '78452415', 
          dias : 'Lunes a Viernes', 
          horario: '8:00 a 23:00',
          servicios: ['Envío a domicilio', 'Recoger en local']
        }
      ];
    }

    connectedCallback() {
      // CAPTURA DE ELEMENTOS
      // IMAGEN BACKGROUND DEL CONTENEDOR PRINCIPAL
      this.imagenBackground = this.querySelector('.psme-pizza-logo-background');
      // SELECTORES DE OPCIONES DE OBTENER SU PRODUCTO
      this.botonOpcionRecogerLocal = this.querySelector('#psme-boton-recoger-local');
      this.botonOpcionEnvioDomicilio = this.querySelector('#psme-boton-envio-domicilio');
      // SELECTORES DE OPCIONES DEL CLIENTE
      this.contenedorOpcionesUsuario = this.querySelector('.psme-opciones');
      this.botonSiguienteOpcion = this.querySelector('#psme-boton-siguiente');
      this.botonOmitirOpcion = this.querySelector('#p-sme-boton-omitir');
      // SECTOR ELEMENTO OPCIONES ENVIO A DOMICILIO
      
      this.contenedorOpcionesEnvioDomicilio = this.querySelector('.psme-opciones-envio-domicilio');
      this.botonUsarMiUbicacionActual = this.querySelector('#psme-boton-ubicacion-actual');
      // SECTOR ELEMENTO OPCIONES RECIBIR EN LOCAL
      this.contenedorListaLocales = this.querySelector('.psme-rl-locales');
      this.contenedorMapaRecogerLocal = this.querySelector('.psme-recoger-local-mapa');
      this.contenedorOpcionesRecogerLocal = this.querySelector('.psme-opciones-recoger-local');
      // SELECTORES DE ELEMENTOS SOBRE EL MODAL
      // ELEMENTOS DEL MODAL DE ENVIO A DOMICILIO
      this.contenidoModal = this.querySelector('.psme-modal-mapa-envio-domicilio');
      this.contenedorMapaModal = this.querySelector('.psme-modal-body');
      this.contenedorTotalModal = this.querySelector('.psme-modal-mapa-envio-domicilio');
      this.botonCerrarModal = this.querySelector('#p-sme-boton-cancelar-modal');
      this.botonConfirmarModal = this.querySelector('#p-sme-boton-confirmar-modal');
      this.botonIconoCerrarModal = this.querySelector('#psme-boton-cerrar-modal');
      // ELEMENTOS DEL INPUT DE DIRECCION
      this.inputDireccion = this.querySelector('#psme-input-direccion');
      this.contenedorSugerencias = this.querySelector('#psme-sugerencias-direccion');


      // Asignar event listeners
      this.botonOpcionRecogerLocal.addEventListener('click', this.accionBotonRecogerLocal.bind(this));
      this.botonOpcionEnvioDomicilio.addEventListener('click', this.accionBotonEnvioDomicilio.bind(this));
      this.botonUsarMiUbicacionActual.addEventListener('click', this.accionUbicacionActualEnvioDomicilio.bind(this));
      this.botonCerrarModal.addEventListener('click', this.cerrarModal.bind(this));
      this.botonIconoCerrarModal.addEventListener('click', this.cerrarModal.bind(this));
      this.botonConfirmarModal.addEventListener('click', this.accionConfirmarModal.bind(this));
      this.botonOmitirOpcion.addEventListener('click', this.botonOmitirPrincipal.bind(this));
      this.contenidoModal.addEventListener('click', (event) => {
        // Verificar si el click fue en el contenedor principal (fondo oscuroo)
        if (event.target === this.contenidoModal) {
          this.cerrarModal();
        }
      });

      // Inicializar contenidos ocultos
      this.contenedorOpcionesRecogerLocal.style.display = 'none';
      this.contenedorOpcionesEnvioDomicilio.style.display = 'none';
      this.contenedorTotalModal.style.visibility = 'hidden';
      this.verificarActivacionBotonSiguientePrincipal();
      {% comment %} this.configurarAutocompletadoDirecciones(); {% endcomment %}
      if (typeof google === 'undefined') {
        console.log('Google Maps aún no está cargado, esperando...');
        // Esperar a que Google Maps se cargue
        window.addEventListener('load', () => {
          if (typeof google !== 'undefined') {
            this.configurarAutocompletadoDirecciones();
          } else {
            console.error('Google Maps no se pudo cargar correctamente');
          }
        });
      } else {
        // Google Maps ya está disponible
        this.configurarAutocompletadoDirecciones();
      }

    
    }

    // FUNCIONES RELACIONADAS A LA SELECCION => RECOGER EN LOCAL

    inicializarMapaRecogerLocal() {
     // Verificar si existe el contenedor del mapa y crear configuracion de mapa
      if (!this.contenedorMapaRecogerLocal) {
        alert('Error: No se pudo cargar el mapa. Por favor recarga la página');
        return;
      }

      const configuracionMapa =  {
        center: this.coordenadasBase,
        zoom: 14,
        mapTypeControl: false,  
        streetViewControl: false, 
        fullscreenControl: false,   
        zoomControl: true,  
        scaleControl: false,
        rotateControl: false,
        panControl: false,
        disableDefaultUI: false,
      };
      
      {% comment %} const mapa = new google.maps.Map(this.contenedorMapaRecogerLocal, configuracionMapa); {% endcomment %}
      this.mapaRecogerLocal = new google.maps.Map(this.contenedorMapaRecogerLocal, configuracionMapa);

      // Crear elemento que indique la ubicacion actual
      const marcadorUbicacionActual = new google.maps.Marker({
        position: this.coordenadasBase,
        map: this.mapaRecogerLocal,
        draggable: false,
        animation: google.maps.Animation.DROP,
      });

      // Crear marcadores personalizados para cada local
      this.pizzaLocations.forEach(local => {
        // Crear icono personalizado
        const iconoPersonalizado = {
          url: '{{ "logo-primario.png" | asset_url }}',
          scaledSize: new google.maps.Size(40, 40),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(20, 40) 
        };

        // Crear el marcador con el icono personalizado
        const marcadorLocal = new google.maps.Marker({
          position: { lat: local.lat, lng: local.lng },
          map: this.mapaRecogerLocal,
          draggable: false,
          icon: iconoPersonalizado
        });

        // Almacenar información personalizada en el marcador
        marcadorLocal.set('infoLocal', JSON.stringify(local));

        // Añadir evento para mostrar la información en la consola al hacer clic
        google.maps.event.addListener(marcadorLocal, 'click', function() {
          console.log('Información del local:', this.get('infoLocal'));

          // Cuando la persona haga click en el marcador debe enfocarlo en la lista de locales
          // Como son varios locales en un scroll tons debe enfocar al marcador que fue clickeado
          // <div class="psme-rl-local></div>
        });
      });

      // Pedir la ubicacion del usuario y actualizar el marcador a esa posicion
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
             try{
              const miUbicacion = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
              };

              // Actualizar el marcador de la ubicación actual
              marcadorUbicacionActual.setPosition(miUbicacion);

              // Mover el mapa a la nueva ubicación
              mapa.panTo(miUbicacion);

              // Actualizar la variable de coordenadas usada de forma general
              this.coordenadas = miUbicacion;

              // Actualizar la lista de locales
              this.crearElementosSeleccionLocal();
            }catch{
              alert('Error al obtener la ubicación: Por favor, verifique la ubicación de su dispositivo');
              console.log('Error al obtener la ubicación 1: ', error);
            }
          },
          (error) => {
            alert('Error al obtener la ubicación: Por favor, verifique la ubicación de su dispositivo');
            console.log('Error al obtener la ubicación 2: ', error);
          }
        );
      }
    }

    crearElementosSeleccionLocal() {
      // Pre-renderizar íconos Liquid como variables JavaScript
      const iconoDisponibilidad = `{% render 'icon-disponibilidad' %}`;
      const iconoLocationOn = `{% render 'icon-location-on' %}`;
      const iconoHeadserMic = `{% render 'icon-headser-mic' %}`;
      const iconoClock = `{% render 'icon-clock' %}`;
      const iconoCheck = `{% render 'icon-check' %}`;
      const iconoMap = `{% render 'icon-map' %}`;
      
      // Obtener la hora actual y almacenar en una variable
      const horaActual = new Date().getHours();
    
      let contenidoHTML = ``;
    
      this.pizzaLocations.forEach(local => {
        // Verificar si el local está abierto
        const estaAbierto = horaActual >= local.horario.split('a')[0] && horaActual <= local.horario.split('a')[1];
        // Quitar espacios en blanco y convertir a minúsculas para el nombre del local
        const nombreIdentificador = this.obtenerNombreIdentificadorLocal(local.name);
        
        contenidoHTML += `
          <div class="psme-rl-local psme-rl-local-no-seleccionado" data-local="${nombreIdentificador}" id="psme-rl-local-${nombreIdentificador}">
            <div class="psme-rl-titulos">
              <h3>SANTA CRUZ</h3>
              <h3 style="color: #C8102E;">${local.name}</h3>
            </div>
        `;
    
        if(estaAbierto){
          contenidoHTML += `
            <div class="psme-rl-disponibilidad">
              <div class="psme-rl-disponibilidad-info psme-rl-abierto ">
                ${iconoDisponibilidad}
                <p>ABIERTO</p>
              </div>
            </div>
          `;
        } else {
          contenidoHTML += `
          <div class="psme-rl-disponibilidad">
            <div class="psme-rl-disponibilidad-info psme-rl-cerrado ">
              ${iconoDisponibilidad}
              <p>CERRADO</p>
            </div>
          </div>
        `;
        }
    
        contenidoHTML += `
            <div class="psme-rl-info-local ">
              <div class="psme-rl-info-local-item">
                ${iconoLocationOn}
                <p>${local.localizacion}</p>
              </div>
              <div class="psme-rl-info-local-item">
                ${iconoHeadserMic}
                <p>${local.telefono}</p>
              </div>
              <div class="psme-rl-info-local-item">
                ${iconoClock}
                <p>De ${local.dias} ${local.horario}</p>
              </div>
              <div class="psme-rl-info-servicios">
          `;
    
          local.servicios.forEach(servicio => {
            contenidoHTML += `
              <div class="psme-rl-info-servicio">
                ${iconoCheck}
                <p>${servicio}</p>
              </div>
            `;
          });
            
          contenidoHTML += `
              </div>
            </div>
            <button 
              class="psme-rl-boton psme-rl-empezar" 
              data-accion="empezar" 
              data-local="${nombreIdentificador}"  
              id="psme-rl-boton-empezar-${nombreIdentificador}">
              <p>EMPEZAR MI PEDIDO</p>
            </button>
            <button 
              class="psme-rl-boton psme-rl-ubicacion"
              data-accion="ubicacion" 
              data-local="${nombreIdentificador}"  
              id="psme-rl-boton-ubicacion-${nombreIdentificador}">
              <p>Abrir ubicación en mapa</p>
              ${iconoMap}
            </button>
          </div>
        `;
      });
    
      this.contenedorListaLocales.innerHTML = contenidoHTML;

      // Configurar el evento delegado después de crear el HTML  => METODO DELEGACION DE EVENTOS
      this.configurarEventosLocales();
    }

    configurarEventosLocales(){
      // Eliminar el evento click del contenedor de locales
      this.contenedorListaLocales.removeEventListener('click', this._manejarEventoLocales);

      // Creamos una función de manejo de eventos y la guardamos como propiedad de la clase
      // para poder eliminarla más tarde si es necesario
      this._manejarEventoLocales = (event) => {
        // 1. Verificar si se hizo clic en un botón específico
        const boton = event.target.closest('.psme-rl-boton');
        if (boton) {
          const nombreLocal = boton.dataset.local;
          const accion = boton.dataset.accion;

          // Ejecutar la acción según el tipo de botón
          if (accion === 'empezar') {
            this.localBotonEmpezarPedido(nombreLocal);
            // Evita que el clic llegue al contenedor local
            event.stopPropagation(); 
            return;
          } else if (accion === 'ubicacion') {
            this.localBotonUbicacionEnMapa(nombreLocal);
            // Evita que el clic llegue al contenedor local
            event.stopPropagation(); 
            return;
          }
        }

        // 2. Si no fue un botón, verificar si se hizo click en el área del local
        const localElement = event.target.closest('.psme-rl-local');
        if (localElement) {
          const nombreLocal = localElement.dataset.local;
          this.localSeleccionado(nombreLocal);
        }
      };

      // Agregamos el event listener al contenedor
      this.contenedorListaLocales.addEventListener('click', this._manejarEventoLocales);
    }

    localSeleccionado(nombreLocal){
      console.log('Entra a localSeleccionado: ', nombreLocal);

      // Quitar la clase seleccionado a todos los locales
      const locales = this.contenedorListaLocales.querySelectorAll('.psme-rl-local');
      locales.forEach(local => {
        local.classList.remove('psme-rl-local-seleccionado');
        local.classList.add('psme-rl-local-no-seleccionado');
      });

      // Marcar el local seleccionado
      const localSeleccionado = this.querySelector(`#psme-rl-local-${nombreLocal}`);
      if (localSeleccionado) {
        localSeleccionado.classList.remove('psme-rl-local-no-seleccionado');
        localSeleccionado.classList.add('psme-rl-local-seleccionado');
      }

      // Enfocar el local seleccionado en el mapa
      const localSeleccionadoDatos = this.pizzaLocations.find(local => this.obtenerNombreIdentificadorLocal(local.name) === nombreLocal);
      this.mapaRecogerLocal.setZoom(17);
      this.mapaRecogerLocal.panTo({
        lat: localSeleccionadoDatos.lat,
        lng: localSeleccionadoDatos.lng
      });
    }

    localBotonEmpezarPedido(nombreLocal){
      console.log('Boton empezar pedido presionado: ', nombreLocal);
    }

    localBotonUbicacionEnMapa(nombreLocal){
      console.log('Boton ubicacion en mapa presionado: ', nombreLocal);
    }

    actualizarElementosSeleccionLocal() {}

    // FUNCIONES RELACIONADAS A LA SELECCION => ENVIO A DOMICILIO

    accionUbicacionActualEnvioDomicilio() {
      this.contenedorOpcionesUsuario.style.display = 'none';
      this.contenedorTotalModal.style.visibility = 'visible';
      // Activar el mapa dentro del modal
      this.inicializarMapaEnvioDomicilio();
    }

    configurarAutocompletadoDirecciones() {
      // Verificar que el input existe
      if (!this.inputDireccion) return;
      
      // Variable para almacenar el timer del debounce
      let timeoutId = null;
      
      // Variable para el servicio de Places
      this.placesService = new google.maps.places.AutocompleteService();
      
      // Escuchar el evento input
      this.inputDireccion.addEventListener('input', (e) => {
        // Limpiar el timer anterior si existe
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        
        const query = e.target.value.trim();
        
        // Si el input está vacío, ocultar sugerencias
        if (!query) {
          this.contenedorSugerencias.style.display = 'none';
          return;
        }
        
        // Configurar debounce (500ms)
        timeoutId = setTimeout(() => {
          this.buscarSugerenciasDirecciones(query);
        }, 500);
      });
      
      // Cerrar sugerencias al hacer clic fuera
      document.addEventListener('click', (e) => {
        if (!this.inputDireccion.contains(e.target) && !this.contenedorSugerencias.contains(e.target)) {
          this.contenedorSugerencias.style.display = 'none';
        }
      });
    }

    buscarSugerenciasDirecciones(query) {
      // Opciones para la búsqueda
      const opcionesBusqueda = {
        input: query,
        componentRestrictions: { country: 'bo' } // Ajusta al país (Bolivia)
      };
      
      // Realizar la búsqueda
      this.placesService.getPlacePredictions(opcionesBusqueda, (predictions, status) => {
        // Limpiar contenedor de sugerencias
        this.contenedorSugerencias.innerHTML = '';
        
        if (status !== google.maps.places.PlacesServiceStatus.OK || !predictions) {
          this.contenedorSugerencias.style.display = 'none';
          return;
        }
        
        // Limitar a 3 sugerencias
        const sugerencias = predictions.slice(0, 3);
        
        // Mostrar sugerencias
        sugerencias.forEach(sugerencia => {
          const elemento = document.createElement('div');
          elemento.classList.add('psme-sugerencia-item');
          
          // Crear elemento p para el texto
          const textoElemento = document.createElement('p');
          textoElemento.textContent = sugerencia.description;
          elemento.appendChild(textoElemento);
          
          // Agregar evento de clic
          elemento.addEventListener('click', () => {
            this.seleccionarDireccion(sugerencia);
          });
          
          this.contenedorSugerencias.appendChild(elemento);
        });
        
        // Mostrar el contenedor
        if (sugerencias.length > 0) {
          this.contenedorSugerencias.style.display = 'block';
        } else {
          this.contenedorSugerencias.style.display = 'none';
        }
      });
    }

    seleccionarDireccion(sugerencia) {
      // Actualizar el valor del input
      this.inputDireccion.value = sugerencia.description;
      
      // Ocultar sugerencias
      this.contenedorSugerencias.style.display = 'none';
      
      // Obtener las coordenadas del lugar seleccionado
      const geocoder = new google.maps.Geocoder();
      geocoder.geocode({ placeId: sugerencia.place_id }, (results, status) => {
        if (status === google.maps.GeocoderStatus.OK && results[0]) {
          const ubicacion = results[0].geometry.location;

          // Actualizar la variable de coordenadas usada de forma general
          this.coordenadas = { 
            lat: ubicacion.lat(), 
            lng: ubicacion.lng() 
          };
          
          console.log('Coordenadas de dirección seleccionada:', this.coordenadas);
          // Aquí puedes hacer lo que necesites con las coordenadas
          // Por ejemplo, mostrar el modal con el mapa centrado en estas coordenadas
        }
      });
    }

    // FUNCIONES SOBRE EL MODAL DEL ENVIO A DOMICILIO

    inicializarMapaEnvioDomicilio() {
      // 1. Crear el mapa
      if (!this.contenedorMapaModal) {
        alert('Error: No se pudo cargar el mapa. Por favor recarga la página');
        return;
      }

      const configuracionMapa =  {
        center: this.coordenadasBase,
        zoom: 16,
        mapTypeControl: false,  
        streetViewControl: false, 
        fullscreenControl: false,   
        zoomControl: true,  
        scaleControl: false,
        rotateControl: false,
        panControl: false,
        disableDefaultUI: false,
      };

      const mapa = new google.maps.Map(this.contenedorMapaModal, configuracionMapa);
      
      // 2. Crear el marcador movible 
      const marcadorMovible = new google.maps.Marker({
        position: this.coordenadasBase,
        map: mapa,
        draggable: true,
        animation: google.maps.Animation.DROP,
      });

      // 3. Configurar el evento del marcador
      marcadorMovible.addListener('dragend', (evento) => {
        try{
          const posicion = marcadorMovible.getPosition();
          this.coordenadas = { lat: posicion.lat(), lng: posicion.lng() };

          console.log('Coordenadas: ', this.coordenadas);
          mapa.panTo(posicion);
        } catch {
          alert('Error al actualizar la posición');
          console.error(error);
        }
      });

      // 4. Pedir la ubicacion del usuario y actualizar el marcador a esa posicion
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            try {
              const miUbicacion = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
              };
      
              marcadorMovible.setPosition(miUbicacion);
              mapa.panTo(miUbicacion);
              this.coordenadas = miUbicacion;
            } catch (error) {  // Añadir el parámetro 'error' aquí
              alert('Error al obtener la ubicación: Por favor, verifique la ubicación de su dispositivo');
              console.log('Error al obtener la ubicación 1: ', error);
            }
          },
          (error) => {
            alert('Error al obtener la ubicación: Por favor, verifique la ubicación de su dispositivo');
            console.log('Error al obtener la ubicación 2: ', error);
          }
        );
      }
    }

    accionConfirmarModal() {
      localStorage.setItem('ubicacion-cliente', JSON.stringify(this.coordenadas));
      console.log('Ubicacion guardada en localStorage: ', localStorage.getItem('ubicacion-cliente'));
      this.cerrarModal();
      // Navegar a la siguiente pagina que correspondee
    }

    cerrarModal() {
      this.contenedorOpcionesUsuario.style.removeProperty('display');
      this.contenedorTotalModal.style.visibility = 'hidden';
    }

    // FUNCIONES SOBRE LA OPCIONES PRINCIPALES

    verificarActivacionBotonSiguientePrincipal(){
      console.log('Entra a verificar activacion boton siguiente principal');
      if(this.botonOpcionEnvioDomicilio.classList.contains('psme-opcion-seleccionado') || 
      this.botonOpcionRecogerLocal.classList.contains('psme-opcion-seleccionado')) {
        // Al menos uno está seleccionado, ACTIVAR el botón
        this.botonSiguienteOpcion.disabled = false;
      } else {
        // Ninguno está seleccionado, DESACTIVAR el botón
        this.botonSiguienteOpcion.disabled = true;
      }
    }

    botonOmitirPrincipal(){
      // Navegar a la siguiente pagina que corresponde
      console.log('Se presiono el boton omitir procede ir a la siguiente pagina');
    }

    botonSiguientePrincipal(){
      // Navegar a la siguiente pagina que corresponde
      console.log('Se presiono el boton siguiente procede ir a la siguiente pagina');
    }

    // FUNCIONES RELACIONADAS A LAS OPCIONES DE RESIBIR LA PIZZA

    accionBotonRecogerLocal() {
      // 1. Cambiar estado visual del botón y obtener elementos clave
      const estaActivo = this.botonOpcionRecogerLocal.classList.toggle('psme-opcion-seleccionado');
      const iconoEstado = this.botonOpcionRecogerLocal.querySelector('.psme-icono-select');
      const imagenBackground = this.imagenBackground;

      if (estaActivo) {
        console.log('Entra a activar modo recogida en local test 1');

        // === MODO ACTIVACIÓN ===
        iconoEstado.innerHTML = `{% render 'icon-estado-on' %}`;

        // Ajustar interfaz para modo recogida en local:
        this.imagenBackground.style.visibility = 'hidden';
        this.contenedorOpcionesRecogerLocal.style.removeProperty('display');
        this.botonSiguienteOpcion.style.display = 'none';
      } else {
        // === MODO DESACTIVACIÓN ===
        this.desactivarBotonRecogerLocal();

        // Revertir cambios de interfaz:
        this.imagenBackground.style.removeProperty('visibility');
        this.contenedorOpcionesRecogerLocal.style.display = 'none';
        this.botonSiguienteOpcion.style.removeProperty('display');
      }

      // Desactivar modo envío a domicilio si está activo
      if (this.botonOpcionEnvioDomicilio.classList.contains('psme-opcion-seleccionado')) {
        this.botonSiguienteOpcion.style.display = 'none';
        {% comment %} this.botonSiguienteOpcion.style.removeProperty('display'); {% endcomment %}
        this.contenedorOpcionesEnvioDomicilio.style.display = 'none';
        this.desactivarBotonEnvioDomicilio();
      }

      // Inicializar mapa para el modo de recogida en local
      this.inicializarMapaRecogerLocal();
      // Crear elementos de seleccion de local
      this.crearElementosSeleccionLocal();
      // Verificar si cumple con los requisitos para activar el boton siguiente
      this.verificarActivacionBotonSiguientePrincipal();
    }

    accionBotonEnvioDomicilio() {
      // 1. Cambiar estado visual del botón y obtener elementos clave
      const estaActivo = this.botonOpcionEnvioDomicilio.classList.toggle('psme-opcion-seleccionado');
      const iconoEstado = this.botonOpcionEnvioDomicilio.querySelector('.psme-icono-select');
      const imagenBackground = this.imagenBackground;

      if (estaActivo) {
        // === MODO ACTIVACIÓN ===
        iconoEstado.innerHTML = `{% render 'icon-estado-on' %}`;

        // Ajustar interfaz para modo envío a domicilio:
        this.imagenBackground.style.visibility = 'hidden';
        this.contenedorOpcionesEnvioDomicilio.style.removeProperty('display');
      } else {
        // === MODO DESACTIVACIÓN ===
        this.desactivarBotonEnvioDomicilio();

        // Revertir cambios de interfaz:
        this.imagenBackground.style.removeProperty('visibility');
        this.contenedorOpcionesEnvioDomicilio.style.display = 'none';
      }

      // Desactivar el modo de recoger en local si está activo
      if (this.botonOpcionRecogerLocal.classList.contains('psme-opcion-seleccionado')) {
        this.botonSiguienteOpcion.style.removeProperty('display');
        this.contenedorOpcionesRecogerLocal.style.display = 'none';
        this.desactivarBotonRecogerLocal();
      }

      // Verificar si cumple con los requisitos para activar el boton siguiente
      this.verificarActivacionBotonSiguientePrincipal();
    }

    desactivarBotonEnvioDomicilio() {
      this.botonOpcionEnvioDomicilio.classList.remove('psme-opcion-seleccionado');
      const iconoEstado = this.botonOpcionEnvioDomicilio.querySelector('.psme-icono-select');
      iconoEstado.innerHTML = `{% render 'icon-estado-off' %}`;
    }

    desactivarBotonRecogerLocal() {
      this.botonOpcionRecogerLocal.classList.remove('psme-opcion-seleccionado');
      const iconoEstado = this.botonOpcionRecogerLocal.querySelector('.psme-icono-select');
      iconoEstado.innerHTML = `{% render 'icon-estado-off' %}`;
    }

    // Helpers para todo el componente
    obtenerNombreIdentificadorLocal(nombreLocal){
      return nombreLocal
        .normalize("NFD")   
        .replace(/[\u0300-\u036f]/g, '')  
        .replace(/[^a-zA-Z0-9]/g, '-')  
        .replace(/-+/g, '-')  
        .replace(/^-+|-+$/g, '')  
        .toLowerCase();   
    }
  }

  customElements.define('cliente-localizacion', ClienteLocalizacion);
</script>

{% comment %}
  TAREAS PARA TERMINAR
  - Activar el modal en el envio a domicilio
    - Hacer mapa del modal con el Usar mi ubicacion actual
    - Hacer el input se direccion dinamica
  - Activar el mapa en el recoger local
    - Hacer la creacion dinamica elementos de seleccion de local
    - Ordenar locales por distancia (coordenadas) default - cliente
    - Hacer marcadores dinamicos que click recoordenen la lista de locales
    - Hacer que la lista que la lista haga el mapa dinamico
    - Seleccion de local y peticion de datos del local (todos los locales - o uno en especifico)
{% endcomment %}
