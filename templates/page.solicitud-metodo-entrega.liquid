{% layout 'none' %}

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solicitud de Método de Entrega</title>

    <script
      defer
      src="https://maps.googleapis.com/maps/api/js?key={{settings.keyGoogleMap}}&libraries=places"
    ></script>
    {{ 'estilos-auxliares.css' | asset_url | stylesheet_tag }}
  </head>
  <cliente-localizacion>
    <body>
      <div class="psme-base-container">
        <div class="psme-pizza-logo-background">
          <img
            src="{{ 'img-aux-background-solicitud-entrega.png' | asset_url }}"
            alt="Pizza Background"
          >
        </div>
        <section class="psme-contenido-principal">
          <div class="psme-pizza-logo">
            <img
              src="{{ 'logo-secondary-2.png' | asset_url }}"
              alt="Pizza Background"
            >
          </div>
          <div class="psme-mensaje">
            <h1 class="psme-title-primario">¿Cómo quieres recibir tu pizza?</h1>
            <p class="psme-title-secundario">
              Elige si la llevamos hasta la puerta de tu casa o si prefieres recogerla tú mismo desde nuestro local más
              cercano.
            </p>
          </div>
          <section class="psme-opciones-entrega">
            <button class="psme-opcion" id="p-sme-boton-recoger-local">
              {% comment %}
                <div class="psme-icono">
                  <img src="{{ 'icon-recoger-local.png' | asset_url }}" alt="Icono Recoger Local">
                </div>
              {% endcomment %}
              <div class="psme-info-select"></div>
            </button>
            <button class="psme-opcion" id="p-sme-boton-envio-domicilio">
              {% comment %}
                <div class="psme-icono">
                  <img src="{{ 'icon-envio-domicilio.png' | asset_url }}" alt="Icono Envio Domicilio">
                </div>
              {% endcomment %}
              <div class="psme-info-select"></div>
            </button>
          </section>
        </section>
      </div>
    </body>
  </cliente-localizacion>
</html>

<script>
  class ClienteLocalizacion extends HTMLElement {
    constructor() {
      super();
      this.coordenadasBase = { lat: -17.783315017953004, lng: -63.18214577296119 };
      this.pizzaLocations = [
        { lat: -17.757619, lng: -63.178738, name: 'BANZER 3ER ANILLO' },
        { lat: -17.70001, lng: -63.160219, name: 'BANZER KM 8.5' },
        { lat: -17.807739, lng: -63.204363, name: 'LAS PALMAS' },
        { lat: -17.758879, lng: -63.19948, name: 'SAN MARTIN' },
        { lat: -17.820341, lng: -63.184337, name: 'SANTOS DUMONT' },
      ];
    }

    connectedCallback() {
      // Capturar elementos
      this.botonRecogerLocal = this.querySelector('.p-sme-boton-recoger-local');
      this.botonEnvioDomicilio = this.querySelector('.p-sme-boton-envio-domicilio');
      this.botonOmitir = this.querySelector('.p-sme-boton-omitir');
      this.botonSiguiente = this.querySelector('.p-sme-boton-siguiente');
      this.contenidoRecogidaLocal = this.querySelector('.p-sme-contenido-recogida-local');
      this.contenidoEnvioDomicilio = this.querySelector('.p-sme-contenido-envio-domicilio');
      this.contenidoModal = this.querySelector('.p-sme-modal-mapa-envio-domicilio');
      this.botonCerrarModal = this.querySelector('#p-sme-boton-cerrar-modal');
      this.botonConfirmarModal = this.querySelector('#p-sme-boton-confirmar-modal');
      this.botonUbicacionActual = this.querySelector('#p-sme-boton-ubicacion-actual');
      this.imagenAuxiliarFondo = this.querySelector('.p-sme-pizza-background');

      // Asignar event listeners
      this.botonRecogerLocal.addEventListener('click', this.accionBotonRecogerLocal.bind(this));
      this.botonEnvioDomicilio.addEventListener('click', this.accionBotonEnvioDomicilio.bind(this));
      this.contenidoModal.addEventListener('click', (event) => {
        // Verificar si el click fue en el contenedor principal (fondo oscuro)
        if (event.target === this.contenidoModal) {
          this.cerrarModal();
        }
      });
      this.botonCerrarModal.addEventListener('click', this.cerrarModal.bind(this));
      this.botonUbicacionActual.addEventListener('click', this.mostrarModal.bind(this));

      // Inicializar contenidos ocultos
      this.contenidoRecogidaLocal.style.visibility = 'hidden';
      this.contenidoEnvioDomicilio.style.visibility = 'hidden';
      this.contenidoModal.style.visibility = 'hidden';
    }

    mostrarModal() {
      this.contenidoModal.style.visibility = 'visible';
      this.inicializarMapa();
    }

    inicializarMapa() {
      try {
        // 1. Configurar mapa con marcador base primero
        this.contenedorMapa = this.querySelector('.p-sme-mapa');
        if (!this.contenedorMapa) {
          alert('Error: No se pudo cargar el mapa. Por favor recarga la página');
          return;
        }

        // Opciones del mapa simplificadas con solo control de zoom
        const opcionesMapa = {
          center: this.coordenadasBase,
          zoom: 15,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          mapTypeControl: false, // Oculta los botones de Mapa/Satélite
          streetViewControl: false, // Oculta el control de Street View
          fullscreenControl: false, // Oculta el botón de pantalla completa
          zoomControl: true, // Mantiene solo los controles de zoom
          scaleControl: false,
          rotateControl: false,
          panControl: false,
          disableDefaultUI: false,
        };

        const mapa = new google.maps.Map(this.contenedorMapa, opcionesMapa);

        // 2. Crear marcador en posición base
        this.marcadorMovible = new google.maps.Marker({
          position: this.coordenadasBase,
          map: mapa,
          draggable: true,
          animation: google.maps.Animation.DROP,
        });

        // 3. Configurar eventos del marcador
        this.configurarEventosMarcador(mapa);

        // 5. Pedir ubicación solo después de tener todo configurad
        this.solicitarUbicacionUsuario(mapa);
      } catch (error) {
        alert('Error al cargar el mapa. Por favor, recarga la página');
        console.log('Error al cargar el mapa: ', error);
      }
    }

    solicitarUbicacionUsuario(mapa) {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (posicion) => {
            try {
              const miUbicacion = {
                lat: posicion.coords.latitude,
                lng: posicion.coords.longitude,
              };

              // Mover marcador solo si se obtiene la ubicación
              this.marcadorMovible.setPosition(miUbicacion);
              mapa.panTo(miUbicacion);
              this.coordenadas = miUbicacion;
            } catch (error) {
              alert('Error al procesar tu ubicación');
            }
          },
          (error) => {
            // No hacer nada si hay error, mantener marcador en posición base
            console.log('Ubicación no obtenida, usando posición default');
          }
        );
      }
    }

    // Métodos auxiliares
    configurarEventosMarcador(mapa) {
      this.marcadorMovible.addListener('dragend', (evento) => {
        try {
          const posicion = this.marcadorMovible.getPosition();
          this.coordenadas = { lat: posicion.lat(), lng: posicion.lng() };

          console.log('Coordenadas: ', this.coordenadas);
          mapa.panTo(posicion);
        } catch (error) {
          alert('Error al actualizar la posición');
        }
      });
    }

    cerrarModal() {
      this.contenidoModal.style.visibility = 'hidden';
    }

    verificarLocalStorage() {
      if (localStorage.getItem('ubicacion-cliente')) {
        let ubicacionCliente = JSON.parse(localStorage.getItem('ubicacion-cliente'));
        this.coordenadasBase = ubicacionCliente;
      } else {
        this.obtenerUbicacion();
      }
    }

    obtenerUbicacion() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            this.coordenadasBase = { lat: position.coords.latitude, lng: position.coords.longitude };
            console.log('Coordenadas de Browser: ', coordenadasBase);
          },
          (error) => {
            alert('Error al obtener la ubicación: Por favor, verifique la ubicación de su dispositivo');
            console.log('Error al obtener la ubicación: ', error);
          }
        );
      }
    }

    accionBotonRecogerLocal() {
      // 1. Cambiar estado visual del botón y obtener elementos clave
      const estaActivo = this.botonRecogerLocal.classList.toggle('p-sme-boton-recoger-local-activo');
      const iconoEstado = this.botonRecogerLocal.querySelector('.p-sme-icono-selecionado');
      const iconoPrincipal = this.botonRecogerLocal.querySelector('.p-sme-icono-recogo-local');
      const textos = this.botonRecogerLocal.querySelectorAll('p');

      if (estaActivo) {
        console.log('Entra a activar modo recogida en local test 1');
        // === MODO ACTIVACIÓN ===
        // Actualizar elementos visuales del botón
        iconoPrincipal.classList.add('p-sme-icono-activo');
        iconoEstado.innerHTML = `{% render 'icon-estado-on' %}`;
        iconoEstado.classList.add('p-sme-icono-activo');
        textos.forEach((p) => (p.style.color = 'white'));

        // Ajustar interfaz para modo recogida en local:
        // - Ocultar la imagen auxiliar de fondo
        this.imagenAuxiliarFondo.style.visibility = 'hidden';
        this.contenidoRecogidaLocal.style.visibility = 'visible';
      } else {
        // === MODO DESACTIVACIÓN ===
        // Restaurar estado original del botón y elementos relacionados
        this.desactivarBotonRecogerLocal();

        // Revertir cambios de interfaz:
        // - Restaurar posición original de la imagen de fondo
        // - Restaurar visibilidad de la sección de envío a domicilio
        this.imagenAuxiliarFondo.style.visibility = 'visible';
        this.imagenAuxiliarFondo.style.top = '31.9rem';
        this.contenidoRecogidaLocal.style.visibility = 'hidden';
      }

      // Desactivar modo envío a domicilio si está activo
      if (this.contenidoEnvioDomicilio.style.visibility === 'visible') {
        this.contenidoEnvioDomicilio.style.visibility = 'hidden';
        this.desactivarBotonEnvioDomicilio();
      }
    }

    accionBotonEnvioDomicilio() {
      // 1. Cambiar estado visual del botón y obtener elementos clave
      const estaActivo = this.botonEnvioDomicilio.classList.toggle('p-sme-boton-envio-domicilio-activo');
      const iconoEstado = this.botonEnvioDomicilio.querySelector('.p-sme-icono-selecionado');
      const iconoPrincipal = this.botonEnvioDomicilio.querySelector('.p-sme-icono-envio-domicilio');
      const textos = this.botonEnvioDomicilio.querySelectorAll('p');

      if (estaActivo) {
        // === MODO ACTIVACIÓN ===
        // Actualizar elementos visuales del botón
        iconoPrincipal.classList.add('p-sme-icono-activo');
        iconoEstado.innerHTML = `{% render 'icon-estado-on' %}`;
        iconoEstado.classList.add('p-sme-icono-activo');
        textos.forEach((p) => (p.style.color = 'white'));

        // Ajustar interfaz para modo envio a domicilio:
        // - Bajar imagen de fondo para hacer espacio al formulario
        // - Mostrar sección de entrada de dirección
        this.imagenAuxiliarFondo.style.top = '40.7528rem';
        this.contenidoEnvioDomicilio.style.visibility = 'visible';
      } else {
        // === MODO DESACTIVACIÓN ===
        // Restaurar estado original del botón y elementos relacionados
        this.desactivarBotonEnvioDomicilio();

        // Revertir cambios de interfaz:
        // - Restaurar posición original de la imagen de fondoo
        // - Ocultar sección de dirección
        this.contenidoEnvioDomicilio.style.visibility = 'hidden';
        this.imagenAuxiliarFondo.style.top = '31.9rem';
      }

      // Desactivar modo recogida en local si está activo
      if (this.contenidoRecogidaLocal.style.visibility === 'visible') {
        console.log('Entra a desactivar modo recogida en local');
        this.contenidoRecogidaLocal.style.visibility = 'hidden';
        this.imagenAuxiliarFondo.style.visibility = 'visible';
        this.desactivarBotonRecogerLocal();
      }
    }

    desactivarBotonEnvioDomicilio() {
      const iconoEstado = this.botonEnvioDomicilio.querySelector('.p-sme-icono-selecionado');
      const iconoPrincipal = this.botonEnvioDomicilio.querySelector('.p-sme-icono-envio-domicilio');
      const textos = this.botonEnvioDomicilio.querySelectorAll('p');

      // ===== MODO DESACTIVADO =====
      // 3.1 Forzar remoción de clase principal (por si hay errores en el toggle)
      this.botonEnvioDomicilio.classList.remove('p-sme-boton-envio-domicilio-activo');

      // 3.2 Restaurar icono principal
      iconoPrincipal?.classList.remove('p-sme-icono-activo');

      // 3.3 Restaurar icono de estado (cross)
      iconoEstado.innerHTML = `{% render 'icon-estado-off' %}`;
      iconoEstado.classList.remove('p-sme-icono-activo');

      textos.forEach((p) => (p.style.color = ''));
    }

    desactivarBotonRecogerLocal() {
      const iconoEstado = this.botonRecogerLocal.querySelector('.p-sme-icono-selecionado');
      const iconoPrincipal = this.botonRecogerLocal.querySelector('.p-sme-icono-recogo-local');
      const textos = this.botonRecogerLocal.querySelectorAll('p');

      this.botonRecogerLocal.classList.remove('p-sme-boton-recoger-local-activo');
      iconoPrincipal?.classList.remove('p-sme-icono-activo');
      iconoEstado.innerHTML = `{% render 'icon-estado-off' %}`;
      iconoEstado.classList.remove('p-sme-icono-activo');

      textos.forEach((p) => (p.style.color = ''));
    }
  }

  customElements.define('cliente-localizacion', ClienteLocalizacion);
</script>

{% comment %} Asdadsa {% endcomment %}
