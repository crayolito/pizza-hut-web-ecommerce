<!-- Hoja de estiloss css -->
{{ 'estilos-generales.css' | asset_url | stylesheet_tag }}
{{ 'estilos-auxliares.css' | asset_url | stylesheet_tag }}
{{ 'page-checkout.css' | asset_url | stylesheet_tag }}

<!-- HOJA DE JS -->
<script src="{{ 'auxiliares-global.js' | asset_url }}" defer></script>

<editar-perfil>
  <div class="container-main-smecph container-base">
    <h1>Editar Perfil</h1>
    <section class="container-sub-smecph" id="pcktph-datos-contacto">
      <div class="smecph-pc-header-especial">
        <div class="smecph-pc-dch_info">
          <h4>Datos de contacto</h4>
          <p>Ingrese tus datos para disfrutar tu pizza favorita.</p>
        </div>
      </div>
      <div class="smecph-formulario-datos-contacto">
        <div class="smecph-pc-info-input">
          <p>Nombres</p>
          <div class="ph-container-input">
            <input
              id="phpep-input-nombre"
              pattern="[A-Za-zÀ-ÖØ-öø-ÿ\s]+"
              required
              type="text"
              placeholder="Nombres"
            >
          </div>
        </div>
        <div class="smecph-pc-info-input">
          <p>Apellidos</p>
          <div class="ph-container-input">
            <input
              id="phpep-input-apellido"
              required
              pattern="[A-Za-zÀ-ÖØ-öø-ÿ\s]+"
              type="text"
              placeholder="Apellidos"
            >
          </div>
        </div>
        <div class="smecph-pc-info-input">
          <p>Correo Electrónico</p>
          <div class="ph-container-input">
            <input
              id="phpep-input-email"
              type="email"
              placeholder="Correo Electrónico"
            >
          </div>
        </div>
        <div class="smecph-pc-info-input">
          <p>Celular</p>
          <div class="ph-container-input">
            <input
              id="phpep-input-celular"
              type="tel"
              placeholder="Numero de celular"
              maxlength="8"
              oninput="
                this.value = this.value.replace(/[^0-9]/g, '');
                if (this.value.length > 0 && this.value[0] !== '6' && this.value[0] !== '7') {
                  this.value = '7' + this.value.substring(1);
                }
              "
              pattern="[67][0-9]{7}"
            >
          </div>
          <div class="smecph-pc-mensaje-input">
            {% render 'icon-info' %}
            <p>Nos contactaremos a este número para entregar tu pedido.</p>
          </div>
        </div>
        <div class="smecph-pc-info-input ">
          <p>Número de Carnet de identidad (C.I.)</p>
          <div class="ph-container-input">
            <input
              id="phpep-input-ci"
              type="tel"
              placeholder="Carnet de identidad"
              maxlength="15"
              oninput="this.value=this.value.replace(/[^0-9]/g,'')"
              pattern="[0-9]{1,8}"
            >
          </div>
        </div>
      </div>
    </section>
    <section class="container-sub-smecph" id="pcktph-datos-contacto">
      <div class="smecph-pc-header-especial">
        <div class="smecph-pc-dch_info">
          <h4>Direccion</h4>
        </div>
      </div>
      <div class="pcktpch-modal-body-fase1">
        <p>Ingresa tu dirección o usa tu ubicación actual.</p>
        <button
          id="phpep-btn-usar-mi-ubicacion"
          class="pcktpch-btn-secundario"
        >
          {% render 'icon-gps-rojo' %}
          <p>USAR MI UBICACIÓN ACTUAL</p>
        </button>
        <div class="pcktpch-modal-separador">
          <div class="pcktpch-modal-separador-linea"></div>
          <p>O</p>
          <div class="pcktpch-modal-separador-linea"></div>
        </div>
        <div class="ph-container-input icon-color-tertiary">
          <div id="phpep-sugerencias-direccion" class="psme-sugerencias-container"></div>
          {% render 'icon-location-on' %}
          <input id="phpep-input-direccion" type="text" placeholder="Ingresar dirección o punto de referencia">
        </div>
      </div>
    </section>

    <section class="ph-opciones-mobile-footer">
      <button
        id="phpep-btn-continuar"
        class="ph-btn-general desactivado"
      >
        <p>CONTINUAR</p>
      </button>
    </section>
  </div>

  <!-- 1re MODAL : SNIPPER DE CARGANDO -->
  <section
    id="phpep-modal-snipper"
    class="ph-background-container-modal"
  >
    <div
      id="phpep-modal-snipper-body"
      class="ph-modal-main-snipper"
    >
      <div class="ph-modal-body-snipper">
        <div class="snipper-container">
          <div class="snipper-background">
            <img
              src="{{ 'fondoSnipper.png' | asset_url }}"
              alt="Fondo de Snipper"
              width="100%"
              height="100%"
            >
          </div>
          <div class="snipper-logo">
            <img
              src="{{ 'logoSnipper.png' | asset_url }}"
              alt="Logo de Snipper"
              width="100%"
              height="100%"
            >
          </div>
        </div>
      </div>
      <p>Procesando informacion ...</p>
    </div>
  </section>

  <!-- MODAL DE DAR MI DIRECCIOsN -->
  <section
    id="phpep-modal-dar-direccion"
    class="psme-modal-mapa-envio-domicilio"
  >
    <div
      id="phpcc-contenido-modal-body"
      class="psme-modal-contenedor-base"
    >
      <div class="psme-modal-header">
        <div class="psme-modal-mensaje">
          {% render 'icon-info' %}
          <p>Si es necesario, cambia la ubicación del pin en el mapa.</p>
        </div>
        <button class="psme-modal-boton-cerrar icon-color-tertiary" id="phpep-boton-cerrar-modal">
          {% render 'icon-close-rojo' %}
        </button>
      </div>
      <div
        id="phpcc-modal-mapa"
        class="psme-modal-body"
      ></div>
      <div class="psme-modal-footer">
        <button class="psme-modal-boton-confirmar" id="phpep-btn-confirmar-modal">
          <p>Confirmar</p>
        </button>
        <button class="psme-modal-boton-cancelar" id="phpep-btn-cancelar-modal">
          <p>Cerrar</p>
        </button>
      </div>
    </div>
  </section>
</editar-perfil>

<script>
  class EditarPerfil extends HTMLElement {
    constructor() {
      super();
      this.coordenadas = { lat: -17.510420897741643, lng: -63.16459000457593 };
      this.direccionSeleccionada = false;
      this.marcadorMovible = null;
    }

    connectedCallback() {
      // REFERENCIAS A ELEMENTOS
      this.btnContinuar = document.getElementById('phpep-btn-continuar');
      this.inputNombre = document.getElementById('phpep-input-nombre');
      this.inputApellido = document.getElementById('phpep-input-apellido');
      this.inputEmail = document.getElementById('phpep-input-email');
      this.inputCelular = document.getElementById('phpep-input-celular');
      this.inputCi = document.getElementById('phpep-input-ci');
      this.inputDireccion = document.getElementById('phpep-input-direccion');
      this.modalSnipper = document.getElementById('phpep-modal-snipper');
      this.modalSnipperBody = document.getElementById('phpep-modal-snipper-body');
      this.modalDarDireccion = document.getElementById('phpep-modal-dar-direccion');
      this.modalBodyMap = document.getElementById('phpcc-modal-mapa');
      this.btnModalDDContinuar = document.getElementById('phpep-btn-confirmar-modal');
      this.btnModalDDCancelar = document.getElementById('phpep-btn-cancelar-modal');
      this.btnModalCerrar = document.getElementById('phpep-boton-cerrar-modal');
      this.btnUsarMiUbicacion = document.getElementById('phpep-btn-usar-mi-ubicacion');
      this.contenedorSugerencias = document.getElementById('phpep-sugerencias-direccion');

      // EVENTOS INCIALIZAR
      this.btnUsarMiUbicacion.addEventListener('click', this.btnUsarMiUbicacionActual.bind(this));
      this.btnContinuar.addEventListener('click', this.btnContinuarClick.bind(this));
      this.btnModalDDContinuar.addEventListener('click', this.procesarConfirmacionModal.bind(this));
      this.btnModalDDCancelar.addEventListener('click', this.cerrarModalDarDireccion.bind(this));
      this.btnModalCerrar.addEventListener('click', this.cerrarModalDarDireccion.bind(this));
      this.inputNombre.addEventListener('input', this.verificiarValidacion.bind(this));
      this.inputApellido.addEventListener('input', this.verificiarValidacion.bind(this));
      this.inputEmail.addEventListener('input', this.verificiarValidacion.bind(this));
      this.inputCelular.addEventListener('input', this.verificiarValidacion.bind(this));
      this.inputCi.addEventListener('input', this.verificiarValidacion.bind(this));
      this.inputNombre.addEventListener('input', this.validarInputTexto.bind(this));
      this.inputApellido.addEventListener('input', this.validarInputTexto.bind(this));
      document.addEventListener('click', this.clickEspeciales.bind(this));

      // INICIALIZAR ELEMENTOS Y PROCESOS (CLAVES)
      this.modalSnipper.style.display = 'none';
      this.modalDarDireccion.style.display = 'none';
      this.inicializarDataLocalStorage();
      this.inicializarObjetoGoogleMaps(0);
    }

    inicializarObjetoGoogleMaps(intentos = 0) {
      // Verificar si Google Maps esta cargado
      if (typeof google == 'undefined') {
        this.modalSnipper.style.display = 'flex';
        if (intentos < 10) {
          console.log('Google Maps no está cargado, esperando... Intento ' + (intentos + 1));
          setTimeout(() => {
            this.inicializarObjetoGoogleMaps(intentos + 1);
          }, 500); // Esperar 0.5 segundos antes de volver a intentar
        } else {
          console.error('Google Maps no se cargó después de varios intentos');
        }
        return;
      }

      this.modalSnipper.style.display = 'none';
      console.log('Google Maps cargado correctamente');
      this.configurarAutocompletadoDirecciones();
    }

    inicializarDataLocalStorage() {
      const datosUsuario = JSON.parse(localStorage.getItem('ph-datos-usuario'));
      const direccion = localStorage.getItem('direccion-cliente');
      const coordenadas = JSON.parse(localStorage.getItem('coordenadas'));
      this.coordenadas = coordenadas || { lat: -17.510420897741643, lng: -63.16459000457593 };

      if (datosUsuario.celular == null || direccion == null) {
        window.location.href = '/';
      }

      const inputs = {
        nombre: this.inputNombre,
        apellido: this.inputApellido,
        email: this.inputEmail,
        celular: this.inputCelular,
        ci: this.inputCi,
      };

      console.log('Inputs: ', inputs);
      console.log('Datos de usuario: ', datosUsuario);

      inputs.nombre.value = datosUsuario.nombre == "----" ? "" : datosUsuario.nombre;
      inputs.apellido.value = datosUsuario.apellido == "----" ? "" : datosUsuario.apellido;
      inputs.email.value = datosUsuario.email == "----" ? "" : datosUsuario.email;
      inputs.celular.value = datosUsuario.celular== "----" ? "" : datosUsuario.celular;
      inputs.ci.value = datosUsuario.ci == "----" ? "" : datosUsuario.ci;
      this.inputDireccion.value = direccion == "----" ? "" : direccion;

      this.verificiarValidacion();
    }

    configurarAutocompletadoDirecciones() {
      // Verificar que el input existe
      if (!this.inputDireccion) return;

      // Variable para almacenar el timer del debounce
      let timeoutId = null;

      // Variable para el servicio de Places
      this.placesService = new google.maps.places.AutocompleteService();

      // Escuchar el evento input
      this.inputDireccion.addEventListener('input', (e) => {
        // Limpiar el timer anterior si existe
        if (timeoutId) {
          clearTimeout(timeoutId);
        }

        const query = e.target.value.trim();

        // Si el input está vacío, ocultar sugerencias
        if (!query) {
          this.contenedorSugerencias.style.display = 'none';
          return;
        }

        // Configurar debounce (500ms)
        timeoutId = setTimeout(() => {
          this.buscarSugerenciasDirecciones(query);
        }, 500);
      });

      // Cerrar sugerencias al hacer clic fuera
      document.addEventListener('click', (e) => {
        if (!this.inputDireccion.contains(e.target) && !this.contenedorSugerencias.contains(e.target)) {
          this.contenedorSugerencias.style.display = 'none';
        }
      });
    }

    buscarSugerenciasDirecciones(query) {
      // Opciones para la búsqueda
      const opcionesBusqueda = {
        input: query,
        componentRestrictions: { country: 'bo' }, // Ajusta al país (Bolivia)
      };

      // Realizar la búsqueda
      this.placesService.getPlacePredictions(opcionesBusqueda, (predictions, status) => {
        // Limpiar contenedor de sugerencias
        this.contenedorSugerencias.innerHTML = '';

        if (status !== google.maps.places.PlacesServiceStatus.OK || !predictions) {
          this.contenedorSugerencias.style.display = 'none';
          return;
        }

        // Limitar a 3 sugerencias
        const sugerencias = predictions.slice(0, 3);

        // Mostrar sugerencias
        sugerencias.forEach((sugerencia) => {
          const elemento = document.createElement('div');
          elemento.classList.add('psme-sugerencia-item');

          // Crear elemento p para el texto
          const textoElemento = document.createElement('p');
          textoElemento.textContent = sugerencia.description;
          elemento.appendChild(textoElemento);

          // Agregar evento de clic
          elemento.addEventListener('click', () => {
            this.seleccionarDireccion(sugerencia);
          });

          this.contenedorSugerencias.appendChild(elemento);
        });

        // Mostrar el contenedor
        if (sugerencias.length > 0) {
          this.contenedorSugerencias.style.display = 'block';
        } else {
          this.contenedorSugerencias.style.display = 'none';
        }
      });
    }

    seleccionarDireccion(sugerencia) {
      this.controlSeleccionInput = true;

      // Actualizar el valor del input
      this.inputDireccion.value = sugerencia.description;

      // Marcar que se ha seleccionado una dirección
      this.direccionSeleccionada = true;

      // Ocultar sugerencias
      this.contenedorSugerencias.style.display = 'none';

      // Obtener las coordenadas del lugar seleccionado
      const geocoder = new google.maps.Geocoder();
      geocoder.geocode({ placeId: sugerencia.place_id }, (results, status) => {
        if (status === google.maps.GeocoderStatus.OK && results[0]) {
          const ubicacion = results[0].geometry.location;

          // Actualizar la variable de coordenadas usada de forma general
          this.coordenadas = {
            lat: ubicacion.lat(),
            lng: ubicacion.lng(),
          };

          console.log('Coordenadas de direcciónn seleccionada:', this.coordenadas);
        }
      });
    }

    validarInputTexto(event) {
      // El elemento que disparó el evento
      const input = event.target;

      // Guarda la posición actual del cursor
      const cursorPos = input.selectionStart;

      // Filtra cualquier carácter que no sea letra o espacio
      const valorOriginal = input.value;
      const valorFiltrado = valorOriginal.replace(/[^A-Za-zÀ-ÖØ-öø-ÿ\s]/g, '');

      // Solo actualiza si hay cambios
      if (valorOriginal !== valorFiltrado) {
        input.value = valorFiltrado;

        // Ajusta la posición del cursor
        input.setSelectionRange(
          cursorPos - (valorOriginal.length - valorFiltrado.length),
          cursorPos - (valorOriginal.length - valorFiltrado.length)
        );
      }
    }

    cerrarModalDarDireccion() {
      this.modalDarDireccion.style.display = 'none';
    }

    clickEspeciales(event) {
      const contenedorBackgroundSnipper = this.modalSnipper;
      const bodySnipper = this.modalSnipperBody;

      contenedorBackgroundSnipper.addEventListener('click', (e) => {
        if (e.target === contenedorBackgroundSnipper && !bodySnipper.contains(e.target)) {
          contenedorBackgroundSnipper.style.display = 'none';
        }
      });
    }

    verificiarValidacion() {
      const inputsForm = [this.inputNombre, this.inputApellido, this.inputEmail, this.inputCelular, this.inputCi];

      const todosValidos = inputsForm.every((input) => input.value.trim() !== '');

      if (todosValidos) {
        this.btnContinuar.classList.remove('desactivado');
        this.btnContinuar.disabled = false;
      } else {
        this.btnContinuar.classList.add('desactivado');
        this.btnContinuar.disabled = true;
      }
    }

    procesarConfirmacionModal() async {
      const posicion = this.marcadorMovible.getPosition();
      this.coordenadas = { lat: posicion.lat(), lng: posicion.lng() };
      const direccion = await AuxiliaresGlobal.obtenerDireccionDesdeCoordenadas(posicion.lat(), posicion.lng());
      localStorage.setItem('direccion-cliente', direccion);
      localStorage.setItem('ubicacion-cliente', JSON.stringify(this.coordenadas));
      this.inputDireccion.value = direccion;
      console.log('Coordenadas de dirección seleccionada:', this.coordenadas);
      console.log('Posicion del marcador:', posicion);
      console.log('Direccion seleccionada:', direccion);
      this.cerrarModalDarDireccion();
    }

    btnContinuarClick() {
      this.modalSnipper.style.display = 'flex';
      this.modalSnipperBody.style.display = 'flex';

      const datosUsuario = {
        nombre: this.inputNombre.value,
        apellido: this.inputApellido.value,
        email: this.inputEmail.value,
        celular: this.inputCelular.value,
        ci: this.inputCi.value,
      };

      localStorage.setItem('ph-datos-usuario', JSON.stringify(datosUsuario));
      localStorage.setItem('direccion-cliente', this.inputDireccion.value);

      setTimeout(() => {
        window.location.href = '/pages/perfil';
      }, 2000);
    }

    btnUsarMiUbicacionActual(){
      this.modalDarDireccion.style.display = 'flex';

      // 1. Crear el mapa
      if (!this.modalBodyMap) {
        alert('Error: No se pudo cargar el mapa. Por favor recarga la página');
        return;
      }

      console.log('Entra a inicializarMapaEnvioDomicilio : ', this.coordenadas);

      const configuracionMapa = {
        center: this.coordenadas,
        zoom: 16,
        mapTypeControl: false,
        streetViewControl: false,
        fullscreenControl: false,
        zoomControl: true,
        scaleControl: false,
        rotateControl: false,
        panControl: false,
        disableDefaultUI: false,
      };

      const mapa = new google.maps.Map(this.modalBodyMap, configuracionMapa);

      // 2. Crear el marcador movible
      {% comment %} const marcadorMovible = new google.maps.Marker({ {% endcomment %}
      this.marcadorMovible = new google.maps.Marker({
        position: this.coordenadas,
        map: mapa,
        draggable: true,
        animation: google.maps.Animation.DROP,
      });

      // 3. Configurar el evento del marcador
      if(this.direccionSeleccionada == true) return;
      this.marcadorMovible.addListener('dragend', (evento) => {
        try {
          const posicion = this.marcadorMovible.getPosition();
          this.coordenadas = { lat: posicion.lat(), lng: posicion.lng() };

          console.log('Coordenadas: ', this.coordenadas);
          mapa.panTo(posicion);
        } catch {
          alert('Error al actualizar la posición');
          console.error(error);
        }
      });

      // 4. Pedir la ubicacion del usuario y actualizar el marcador a esa posicion
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            try {
              const miUbicacion = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
              };

              this.marcadorMovible.setPosition(miUbicacion);
              mapa.panTo(miUbicacion);
              this.coordenadas = miUbicacion;
            } catch (error) {
              alert('Error al obtener la ubicación: Por favor, verifique la ubicación de su dispositivo');
              console.log('Error al obtener la ubicación 1: ', error);
            }
          },
          (error) => {
            alert('Error al obtener la ubicación: Por favor, verifique la ubicación de su dispositivo');
            console.log('Error al obtener la ubicación 2: ', error);
          }
        );
      }
    }
  }

  customElements.define('editar-perfil', EditarPerfil);
</script>
